{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TweetComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","ref","required","type","TweetList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","console","log","send","loadTweets","alert","map","item","index","Tweet","tweet","key","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","StrictMode","tweetsEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,kC,+LCIpC,SAASC,EAAeC,GAC7B,IAAMC,EAAcC,IAAMC,YADS,EAEAC,mBAAS,IAFT,mBAE5BC,EAF4B,KAEhBC,EAFgB,KAenC,OAAO,yBAAKC,UAAaP,EAAMO,WAC7B,yBAAKA,UAAY,eACnB,0BAAMC,SAde,SAACC,GACpBA,EAAMC,iBACN,IAAMC,EAASV,EAAYW,QAAQC,MAC/BC,EAAa,YAAOT,GACxBS,EAAcC,QAAQ,CACpBC,QAAUL,EACVM,MAAQ,EACRC,GAAK,QAEPZ,EAAaQ,GACbb,EAAYW,QAAQC,MAAQ,KAK5B,8BAAUM,IAAOlB,EAAamB,UAAY,EAAMb,UAAU,iBAC1D,4BAAQc,KAAK,SAASd,UAAU,wBAAhC,WAGJ,kBAACe,EAAD,CAAWjB,UAAaA,KAIjB,SAASiB,EAAUtB,GAAO,IAAD,EACKI,mBAAS,IADd,mBACvBmB,EADuB,KACZC,EADY,OAEDpB,mBAAS,IAFR,mBAEvBqB,EAFuB,KAEdC,EAFc,KAoB9B,OAjBAC,qBAAU,WACR,IAAMC,EAAQ,YAAI5B,EAAMK,WAAWwB,OAAON,GACvCK,EAAME,SAAWL,EAAOK,QACtBJ,EAAUE,KAEf,CAAC5B,EAAMK,UAAYoB,EAASF,IAC9BI,qBAAU,YCvCL,SAAoBI,GACvB,IAAMC,EAAM,IAAIC,eAIhBD,EAAIE,aADiB,OAErBF,EAAIG,KAJW,MACH,oCAIZH,EAAII,OAAS,WACTL,EAASC,EAAIK,SAASL,EAAIM,SAE9BN,EAAIO,QAAU,SAAUC,GACtBC,QAAQC,IAAIF,GACZT,EAAS,CAAC,QAAY,4BAA4B,MAEpDC,EAAIW,ODkCJC,EARmB,SAACP,EAASC,GACb,MAAXA,EACDd,EAAca,GAGdQ,MAAM,2BAIV,CAACtB,IACIE,EAAOqB,KAAI,SAACC,EAAKC,GACpB,OAAO,kBAACC,EAAD,CAAOC,MAASH,EAAMxC,UAAY,sCAAsC4C,IAAG,UAAOH,EAAP,mBAKjF,SAASI,EAAUpD,GAAO,IACxBkD,EAAgBlD,EAAhBkD,MAAMG,EAAUrD,EAAVqD,OADiB,EAELjD,oBAAyB,IAAhB8C,EAAMjC,OAFV,mBAEvBA,EAFuB,KAEjBqC,EAFiB,OAGGlD,oBAAS,GAHZ,mBAGvBmD,EAHuB,KAGZC,EAHY,KAIxBjD,EAAYP,EAAMO,UAAYP,EAAMO,UAAY,yBAChDkD,EAAgBJ,EAAOK,QAAUL,EAAOK,QAAU,SAclDA,EAA0B,SAAhBL,EAAOhC,KAAP,UAA4BJ,EAA5B,YAAqCwC,GAAkBA,EACvE,OAAO,4BAAQlD,UAAaA,EAAWoD,QAdnB,SAAClD,GACjBA,EAAMC,iBACa,SAAhB2C,EAAOhC,QACU,IAAbkC,GACCD,EAASrC,EAAM,GACfuC,GAAY,KAGZA,GAAY,GACZF,EAASrC,EAAM,OAKqCyC,GAG3D,SAAST,EAAMjD,GAAQ,IACrBkD,EAASlD,EAATkD,MACD3C,EAAYP,EAAMO,UAAYP,EAAMO,UAAY,0BACtD,OAAO,yBAAKA,UAAaA,GACvB,2BAAI2C,EAAMhC,GAAV,MAAiBgC,EAAMlC,SACvB,yBAAKT,UAAY,iBACf,kBAAC6C,EAAD,CAAWF,MAASA,EAAOG,OAAU,CAAChC,KAAO,OAASqC,QAAU,WAChE,kBAACN,EAAD,CAAWF,MAASA,EAAOG,OAAU,CAAChC,KAAO,SAAWqC,QAAU,YAClE,kBAACN,EAAD,CAAWF,MAASA,EAAOG,OAAU,CAAChC,KAAO,UAAYqC,QAAU,eEzD1DE,MAxBf,WACE,OACE,yBAAKrD,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKsD,IAAKC,IAAMvD,UAAU,WAAWwD,IAAI,SACzC,mCACO,4CADP,wBAGA,6BACE,kBAAChE,EAAD,OAEF,uBACEQ,UAAU,WACVyD,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBCLYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVN,IAAMC,EAAQC,SAASC,eAAe,QACnCF,GACDG,IAASC,OACT,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFL,GAGF,IAAMM,EAAWL,SAASC,eAAe,WACtCI,GACAH,IAASC,OACV,kBAAC,IAAMC,WAAP,KACE,kBAAC9E,EAAD,OAEF+E,GD4GI,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.4377b6cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React , {useEffect,useState} from 'react'\n\nimport {loadTweets} from '../lookup'\n\nexport function TweetComponent(props){\n  const textAreaRef = React.createRef()\n  const [newTweets , setNewTweets] = useState([])\n  const handleSubmit = (event) =>{\n    event.preventDefault()\n    const newVal = textAreaRef.current.value\n    let tempNewTweets = [...newTweets]\n    tempNewTweets.unshift({\n      content : newVal,\n      likes : 0,\n      id : 12313\n    })\n    setNewTweets(tempNewTweets)\n    textAreaRef.current.value = ''\n  }\n  return <div className = {props.className}>\n    <div className = 'col-12 mb-3'>\n  <form onSubmit={handleSubmit}>\n    <textarea ref = {textAreaRef} required = {true} className='form-control'></textarea>\n    <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n</form>\n</div>\n<TweetList newTweets = {newTweets}/>\n   </div>\n}\n\nexport function TweetList(props){\n  const [tweetsInit,setTweetsInit] = useState([])\n  const [tweets , setTweets] = useState([])\n  useEffect(() =>{\n    const final = [...props.newTweets].concat(tweetsInit)\n    if(final.length !== tweets.length) {\n         setTweets(final)\n    }\n  },[props.newTweets , tweets , tweetsInit])\n  useEffect(() => {\n    const myCallback = (response,status) => {\n      if(status === 200){\n        setTweetsInit(response)\n      }\n      else{\n        alert(\"There was an error\")\n      }\n    }\n    loadTweets(myCallback)\n  },[tweetsInit])\n  return tweets.map((item,index) => {\n      return <Tweet tweet = {item} className = 'my-5 py-5 border bg-white text-dark' key = {`${index}-{item.id}`}/>\n    })\n}\n\n\nexport function ActionBtn(props){\n  const {tweet,action} = props\n  const [likes,setLikes] = useState(tweet.likes === true ? true : false)\n  const [userLike , setUserLike] = useState(false)\n  const className = props.className ? props.className : 'btn btn-primary btn-sm'\n  const actionDisplay = action.display ? action.display : 'Action'\n  const handleClick = (event) =>{\n      event.preventDefault()\n      if(action.type === 'like'){\n          if(userLike === true){\n              setLikes(likes-1)\n              setUserLike(false)\n          }\n          else{\n              setUserLike(true)\n              setLikes(likes+1)\n          }\n      }\n  }\n  const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n  return <button className = {className} onClick = {handleClick}>{display}</button>\n}\n\nexport function Tweet(props) {\n  const {tweet} = props\n  const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n  return <div className = {className}>\n    <p>{tweet.id} - {tweet.content}</p>\n    <div className = 'btn btn-group'>\n      <ActionBtn tweet = {tweet} action = {{type : \"like\" , display : \"Likes\"}} />\n      <ActionBtn tweet = {tweet} action = {{type : \"unlike\" , display : \"Unlike\"}} />\n      <ActionBtn tweet = {tweet} action = {{type : \"retweet\" , display : \"Retweet\"}} />\n\n    </div>\n  </div>\n}","export function loadTweets(callback){\n    const xhr = new XMLHttpRequest() // xhr = Someclass()\n    const method = 'GET' // POST\n    const url = \"http://localhost:8000/api/tweets\"\n    const responseType = \"json\"\n    xhr.responseType = responseType\n    xhr.open(method,url)\n    xhr.onload = function(){\n        callback(xhr.response,xhr.status)\n    }\n    xhr.onerror = function (e) {\n      console.log(e)\n      callback({\"message\" : \"The request was an error\"},400)\n    }\n    xhr.send()\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetComponent} from './tweets'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {TweetComponent} from './tweets';\n\n\nconst appEl = document.getElementById('root')\nif(appEl){\n  ReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  appEl);\n}\n\nconst tweetsEl = document.getElementById('tweetme')\nif(tweetsEl){\n   ReactDOM.render(\n  <React.StrictMode>\n    <TweetComponent />\n  </React.StrictMode>,\n  tweetsEl);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}