{"ast":null,"code":"function getCookie(name) {\n  var cookieValue = null;\n\n  if (document.cookie && document.cookie !== '') {\n    var cookies = document.cookie.split(';');\n\n    for (var i = 0; i < cookies.length; i++) {\n      var cookie = cookies[i].trim(); // Does this cookie string begin with the name we want?\n\n      if (cookie.substring(0, name.length + 1) === name + '=') {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n\n  return cookieValue;\n}\n\nfunction lookup(method, endpoint, callback, data) {\n  let jsonData;\n\n  if (data) {\n    jsonData = JSON.stringify(data);\n  }\n\n  const xhr = new XMLHttpRequest();\n  const url = `http://localhost:8000/api${endpoint}`;\n  xhr.responseType = \"json\";\n  const csrftoken = getCookie('csrftoken');\n  xhr.open(method, url);\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n  xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\");\n  xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n  xhr.setRequestHeader(\"X-CSRFToken\", csrftoken);\n  if (csrf) xhr.onload = function () {\n    callback(xhr.response, xhr.status);\n  };\n\n  xhr.onerror = function (e) {\n    console.log(e);\n    callback({\n      \"message\": \"The request was an error\"\n    }, 400);\n  };\n\n  xhr.send(jsonData);\n}\n\nexport function createTweet(newTweet, callback) {\n  lookup(\"POST\", \"/tweets/create/\", callback, {\n    content: newTweet\n  });\n}\nexport function loadTweets(callback) {\n  lookup(\"GET\", \"/tweets/\", callback);\n}","map":{"version":3,"sources":["/home/tb2/youtube/myprojects/tweetme/tweetme-web/src/lookup/components.js"],"names":["getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","lookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","open","setRequestHeader","csrf","onload","response","status","onerror","e","console","log","send","createTweet","newTweet","content","loadTweets"],"mappings":"AAAA,SAASA,SAAT,CAAmBC,IAAnB,EAAyB;AACrB,MAAIC,WAAW,GAAG,IAAlB;;AACA,MAAIC,QAAQ,CAACC,MAAT,IAAmBD,QAAQ,CAACC,MAAT,KAAoB,EAA3C,EAA+C;AAC3C,QAAIC,OAAO,GAAGF,QAAQ,CAACC,MAAT,CAAgBE,KAAhB,CAAsB,GAAtB,CAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,UAAIH,MAAM,GAAGC,OAAO,CAACE,CAAD,CAAP,CAAWE,IAAX,EAAb,CADqC,CAErC;;AACA,UAAIL,MAAM,CAACM,SAAP,CAAiB,CAAjB,EAAoBT,IAAI,CAACO,MAAL,GAAc,CAAlC,MAA0CP,IAAI,GAAG,GAArD,EAA2D;AACvDC,QAAAA,WAAW,GAAGS,kBAAkB,CAACP,MAAM,CAACM,SAAP,CAAiBT,IAAI,CAACO,MAAL,GAAc,CAA/B,CAAD,CAAhC;AACA;AACH;AACJ;AACJ;;AACD,SAAON,WAAP;AACH;;AAED,SAASU,MAAT,CAAgBC,MAAhB,EAAyBC,QAAzB,EAAoCC,QAApC,EAA+CC,IAA/C,EAAoD;AAClD,MAAIC,QAAJ;;AACA,MAAGD,IAAH,EAAQ;AACNC,IAAAA,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAX;AACD;;AACC,QAAMI,GAAG,GAAG,IAAIC,cAAJ,EAAZ;AACA,QAAMC,GAAG,GAAI,4BAA2BR,QAAS,EAAjD;AACAM,EAAAA,GAAG,CAACG,YAAJ,GAAmB,MAAnB;AACA,QAAMC,SAAS,GAAGxB,SAAS,CAAC,WAAD,CAA3B;AACAoB,EAAAA,GAAG,CAACK,IAAJ,CAASZ,MAAT,EAAgBS,GAAhB;AACAF,EAAAA,GAAG,CAACM,gBAAJ,CAAqB,cAArB,EAAsC,kBAAtC;AACAN,EAAAA,GAAG,CAACM,gBAAJ,CAAqB,uBAArB,EAA+C,gBAA/C;AACAN,EAAAA,GAAG,CAACM,gBAAJ,CAAqB,kBAArB,EAA0C,gBAA1C;AACAN,EAAAA,GAAG,CAACM,gBAAJ,CAAqB,aAArB,EAAqCF,SAArC;AACA,MAAGG,IAAH,EACAP,GAAG,CAACQ,MAAJ,GAAa,YAAU;AACnBb,IAAAA,QAAQ,CAACK,GAAG,CAACS,QAAL,EAAcT,GAAG,CAACU,MAAlB,CAAR;AACH,GAFD;;AAGAV,EAAAA,GAAG,CAACW,OAAJ,GAAc,UAAUC,CAAV,EAAa;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAjB,IAAAA,QAAQ,CAAC;AAAC,iBAAY;AAAb,KAAD,EAA0C,GAA1C,CAAR;AACD,GAHD;;AAIAK,EAAAA,GAAG,CAACe,IAAJ,CAASlB,QAAT;AACH;;AAED,OAAO,SAASmB,WAAT,CAAqBC,QAArB,EAAgCtB,QAAhC,EAAyC;AAC5CH,EAAAA,MAAM,CAAC,MAAD,EAAQ,iBAAR,EAA0BG,QAA1B,EAAmC;AAACuB,IAAAA,OAAO,EAACD;AAAT,GAAnC,CAAN;AAEH;AAED,OAAO,SAASE,UAAT,CAAoBxB,QAApB,EAA6B;AAChCH,EAAAA,MAAM,CAAC,KAAD,EAAO,UAAP,EAAkBG,QAAlB,CAAN;AACH","sourcesContent":["function getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\nfunction lookup(method , endpoint , callback , data){\n  let jsonData;\n  if(data){\n    jsonData = JSON.stringify(data)\n  }\n    const xhr = new XMLHttpRequest()\n    const url = `http://localhost:8000/api${endpoint}`\n    xhr.responseType = \"json\"\n    const csrftoken = getCookie('csrftoken');\n    xhr.open(method,url)\n    xhr.setRequestHeader(\"Content-Type\" , \"application/json\")\n    xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\" , \"XMLHttpRequest\")\n    xhr.setRequestHeader(\"X-Requested-With\" , \"XMLHttpRequest\")\n    xhr.setRequestHeader(\"X-CSRFToken\" , csrftoken)\n    if(csrf)\n    xhr.onload = function(){\n        callback(xhr.response,xhr.status)\n    }\n    xhr.onerror = function (e) {\n      console.log(e)\n      callback({\"message\" : \"The request was an error\"},400)\n    }\n    xhr.send(jsonData)\n}\n\nexport function createTweet(newTweet , callback){\n    lookup(\"POST\",\"/tweets/create/\",callback,{content:newTweet})\n\n}\n\nexport function loadTweets(callback){\n    lookup(\"GET\",\"/tweets/\",callback)\n}"]},"metadata":{},"sourceType":"module"}