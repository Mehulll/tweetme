{"version":3,"sources":["logo.svg","lookup/components.js","tweets/lookup.js","tweets/buttons.js","profiles/components.js","tweets/detail.js","tweets/list.js","tweets/create.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","status","response","detail","window","location","href","indexOf","onerror","e","console","log","send","apiTweetList","username","nextUrl","undefined","replace","ActionBtn","props","tweet","action","didPerformAction","likes","className","actionDisplay","display","handleActionBackendEvent","type","onClick","event","preventDefault","tweetId","id","apiTweetAction","UserLink","children","UserDisplay","user","nameDisplay","includeFullName","first_name","last_name","Fragment","UserPicture","ParentTweet","parent","Tweet","isRetweet","retweeter","hideActions","didRetweet","useState","actionTweet","setActionTweet","match","pathname","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","TweetList","tweetsInit","setTweetsInit","tweets","setTweets","setNextUrl","tweetsDidSet","setTweetsDidSet","useEffect","final","newTweets","concat","next","results","alert","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index","key","TweetCreate","textAreaRef","React","createRef","didTweet","handleBackendUpdate","onSubmit","newVal","current","value","content","ref","required","TweetComponent","setNewTweets","canTweet","tempNewTweets","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apiTweetDetail","App","src","logo","alt","target","rel","Boolean","hostname","appEl","getElementById","ReactDOM","render","createElement","tweetsEl","dataset","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5b6fd077.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function getCookie(name) {\n  var cookieValue = null;\n  if (document.cookie && document.cookie !== '') {\n      var cookies = document.cookie.split(';');\n      for (var i = 0; i < cookies.length; i++) {\n          var cookie = cookies[i].trim();\n          // Does this cookie string begin with the name we want?\n          if (cookie.substring(0, name.length + 1) === (name + '=')) {\n              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n              break;\n          }\n      }\n  }\n  return cookieValue;\n}\n\nexport function backendLookup(method, endpoint, callback, data) {\n  let jsonData;\n  if (data){\n    jsonData = JSON.stringify(data)\n  }\n  const xhr = new XMLHttpRequest()\n  const url = `http://localhost:8000/api${endpoint}`\n  xhr.responseType = \"json\"\n  const csrftoken = getCookie('csrftoken');\n  xhr.open(method, url)\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\")\n\n  if (csrftoken){\n    // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\n  }\n  \n  xhr.onload = function() {\n    if (xhr.status === 403){\n      const detail = xhr.response.detail\n      if(detail === \"Authentication credentials were not provided.\"){\n        if (window.location.href.indexOf(\"login\") === -1) {\n          window.location.href = \"/login?showLoginRequired=true\"\n        }\n      }\n    }\n    callback(xhr.response, xhr.status)\n  }\n  xhr.onerror = function (e) {\n    console.log(e)\n    callback({\"message\": \"The request was an error\"}, 400)\n  }\n  xhr.send(jsonData)\n}\n\n","import {backendLookup} from '../lookup'\n\nexport function apiTweetCreate(newTweet, callback){\n  backendLookup(\"POST\", \"/tweets/create/\", callback, {content: newTweet})\n}\n\nexport function apiTweetAction(tweetId , action , callback){\n  const data = {id: tweetId , action : action}\n  backendLookup(\"POST\", \"/tweets/action/\", callback,data )\n}\n\nexport function apiTweetDetail(tweetId , callback) {\n    backendLookup(\"GET\",`/tweets/${tweetId}/`, callback)\n}\n\nexport function apiTweetFeed(callback, nextUrl) {\n    let endpoint =  \"/tweets/feed/\"\n    if (nextUrl !== null && nextUrl !== undefined) {\n        endpoint = nextUrl.replace(\"http://localhost:8000/api\", \"\")\n    }\n    backendLookup(\"GET\", endpoint, callback)\n}\n\nexport function apiTweetList(username, callback, nextUrl) {\n    let endpoint = \"/tweets/\"\n    if(username){\n      endpoint = `/tweets/?username=${username}`\n    }\n    if (nextUrl !== null && nextUrl !== undefined) {\n        endpoint = nextUrl.replace(\"http://localhost:8000/api\", \"\")\n    }\n    backendLookup(\"GET\",endpoint, callback)\n}","import React from 'react'\n\nimport {apiTweetAction} from './lookup'\n\nexport function ActionBtn(props) {\n    const {tweet, action,didPerformAction} = props\n    const likes = tweet.likes\n            ? tweet.likes\n            : 0\n    const className = props.className\n        ? props.className\n        : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display\n        ? action.display\n        : 'Action'\n\n    const handleActionBackendEvent = (response , status) =>{\n        if((status === 200 || status === 201) && didPerformAction){\n            didPerformAction(response,status)\n        }\n    }\n    const handleClick = (event) => {\n        event.preventDefault()\n        apiTweetAction(tweet.id ,action.type,handleActionBackendEvent )\n        \n    }\n    const display = action.type === 'like'\n        ? `${likes} ${actionDisplay}`\n        : actionDisplay\n    return <button className={className} onClick={handleClick}>{display}</button>\n}\n","import React from 'react'\n\n\n\nexport function UserLink (props) {\n  const {username} = props\n  const handleUserLink = (event) => {\n    window.location.href= `/profiles/${username}`\n  }\n  return <span className='pointer' onClick={handleUserLink}>\n      {props.children}\n  </span>\n}\n\n\nexport  function UserDisplay(props){\n  const {user, includeFullName} = props\n  const nameDisplay = includeFullName === true ? `${user.first_name} ${user.last_name} ` : null\n  return <React.Fragment>\n    {nameDisplay}\n    <UserLink username={user.username}>@{user.username}</UserLink>\n  </React.Fragment>\n}\n\nexport  function UserPicture (props) {\n  const {user} = props\n  return  <UserLink username={user.username}><span className='mx-1 px-3 py-2 rounded-circle bg-dark text-white'>\n         {user.username[0]}\n  </span></UserLink>\n}","import React, { useState} from 'react'\n\nimport {ActionBtn} from './buttons'\nimport {\n  UserDisplay,\n  UserPicture\n} from '../profiles'\n\nexport function ParentTweet(props){\n    const {tweet} = props\n    return tweet.parent ? <Tweet isRetweet retweeter={props.retweeter} hideActions className={' '} tweet={tweet.parent} /> : null    \n}\n\nexport function Tweet(props) {\n    const {tweet,didRetweet,hideActions , isRetweet , retweeter} = props\n    const [actionTweet , setActionTweet] = useState(props.tweet ? props.tweet : null)\n    let className = props.className\n        ? props.className\n        : 'col-10 mx-auto col-md-6'\n    className = isRetweet === true ? `${className} p-2 border rounded` : className\n    const path = window.location.pathname\n    const match = path.match(/(?<tweetid>\\d+)/)\n    const urlTweetId = match ? match.groups.tweetid : -1\n    const isDetail = `${tweet.id}` === `${urlTweetId}` \n    const handleLink = (event) =>{\n        event.preventDefault()\n        window.location.href = `/${tweet.id}`\n    }\n    const handlePerformAction = (newActionTweet,status) =>{\n        if(status === 200){\n            setActionTweet(newActionTweet)\n        }else if(status === 201){\n            didRetweet(newActionTweet)  \n        }\n    }\n    \n    return <div className={className}>\n        {isRetweet === true && <div className='mb-2'>\n        <span className='small text-muted'>Retweet via <UserDisplay user={retweeter} /></span>\n        </div>}\n        <div className='d-flex'>\n        <UserPicture user={tweet.user} />\n        <div className=''>\n\n          </div>\n          <div className='col-11'></div>\n\n        <div>\n            <p>\n                <UserDisplay includeFullName user={tweet.user} />\n            </p>\n            <ParentTweet tweet={tweet} retweeter={tweet.user} />\n        </div>\n       <div className='btn btn-group px-0'>\n           {(actionTweet && hideActions !== true) && <React.Fragment>\n            <ActionBtn\n                tweet={actionTweet} didPerformAction = {handlePerformAction}\n                action={{\n                    type: \"like\",\n                    display: \"Likes\"\n                }}/>\n            <ActionBtn\n                tweet={actionTweet} didPerformAction = {handlePerformAction}\n                action={{\n                    type: \"unlike\",\n                    display: \"Unlike\"\n                }}/>\n            <ActionBtn\n                tweet={actionTweet} didPerformAction = {handlePerformAction}\n                action={{\n                    type: \"retweet\",\n                    display: \"\"\n                }}/>\n            </React.Fragment>\n}\n            {isDetail === true ? null :<button className = 'btn btn-outline-primary btn-sm' onClick = {handleLink}>View</button> }\n        </div>\n      </div>\n    </div>\n}","import React, {useEffect, useState} from 'react'\n\nimport {apiTweetList} from './lookup'\n\nimport {Tweet} from './detail'\n\nexport function TweetList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    const [nextUrl, setNextUrl] = useState(null)\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\n    useEffect(() => {\n        const final = [...props.newTweets].concat(tweetsInit)\n        if (final.length !== tweets.length) {\n            setTweets(final)\n        }\n    }, [props.newTweets, tweets, tweetsInit])\n\n    useEffect(() => {\n        if (tweetsDidSet === false) {\n            const handleTweetListLookup = (response, status) => {\n                if (status === 200) {\n                    setNextUrl(response.next)\n                    setTweetsInit(response.results)                    \n                    setTweetsDidSet(true)\n                } else {\n                    alert(\"There was an error\")\n                }\n            }\n            apiTweetList(props.username,handleTweetListLookup)\n        }\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet,props.username])\n\n    const handleDidRetweet = (newTweet) => {\n        const updateTweetsInit = [...tweetsInit]\n        updateTweetsInit.unshift(newTweet)\n        setTweetsInit(updateTweetsInit)\n        const updateFinalTweets = [...tweets]\n        updateFinalTweets.unshift(tweets)\n        setTweets(updateFinalTweets)\n    }\n    const handleLoadNext = (event) => {\n      event.preventDefault()\n      if (nextUrl !== null) {\n        const handleLoadNextResponse = (response, status) =>{\n          if (status === 200){\n            setNextUrl(response.next)\n            const newTweets = [...tweets].concat(response.results)\n            setTweetsInit(newTweets)\n            setTweets(newTweets)\n          } else {\n            alert(\"There was an error\")\n          }\n        }\n        apiTweetList(props.username, handleLoadNextResponse, nextUrl)\n      }\n    }\n    return <React.Fragment>{tweets.map((item, index)=>{\n        return <Tweet\n            tweet={item}\n            didRetweet = {handleDidRetweet}\n            className='my-5 py-5 border bg-white text-dark'\n            key={`${index}-{item.id}`}/>\n    })}\n    {nextUrl !== null && <button onClick={handleLoadNext} className='btn btn-outline-primary'>Load next</button>}\n    </React.Fragment>\n}\n","import React from 'react'\nimport {apiTweetCreate} from './lookup'\n\nexport function TweetCreate(props){\n    const textAreaRef = React.createRef()\n    const {didTweet} = props\n    const handleBackendUpdate = (response, status) => {\n        if (status === 201) {\n            didTweet(response)\n        } else {\n            console.log(response)\n            alert(\"An error occured please try again\")\n        }\n    }\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const newVal = textAreaRef.current.value\n        //backend api request\n        apiTweetCreate(newVal, handleBackendUpdate)\n        textAreaRef.current.value = ''\n    }\n    return <div className={props.className}>\n            <form onSubmit={handleSubmit}>\n                <textarea\n                    ref={textAreaRef}\n                    required={true}\n                    className='form-control'\n                    name='tweet'></textarea>\n                <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n            </form>\n        </div>\n}\n\n","import React , {useEffect , useState} from 'react'\nimport {TweetList} from './list'\nimport {TweetCreate} from './create'\nimport {apiTweetDetail} from './lookup'\nimport {FeedList} from './feed'\nimport {Tweet} from './detail'\n\n\nexport function FeedComponent(props) {\n  const [newTweets, setNewTweets] = useState([])\n  const canTweet = props.canTweet === \"false\" ? false : true\n  const handleNewTweet = (newTweet) =>{\n    let tempNewTweets = [...newTweets]\n    tempNewTweets.unshift(newTweet)\n    setNewTweets(tempNewTweets)\n  }\n  return <div className={props.className}>\n          {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3' />}\n        <FeedList newTweets={newTweets} {...props} />\n  </div>\n}\n\nexport function TweetComponent(props) {\n    const [newTweets, setNewTweets] = useState([])\n    const canTweet = props.canTweet === \"false\" ? false : true\n    const handleNewTweet = (newTweet) => {\n        let tempNewTweets = [...newTweets]\n        tempNewTweets.unshift(newTweets)\n        setNewTweets(tempNewTweets)\n    }\n    return <div className={props.className}>\n        {canTweet === true && <TweetCreate didTweet = {handleNewTweet} className='col-12 mb-3'/>}\n        <TweetList newTweets={newTweets} {...props}/>\n    </div>\n}\n\nexport function TweetDetailComponent(props){\n    const {tweetId} = props\n    const [didLookup , setDidLookup] = useState(false)\n    const [tweet,setTweet] = useState(null)\n    \n    const handleBackendLookup = (response , status) =>{\n        if(status === 200){\n            setTweet(response)\n        }else{\n            alert(\"There was an erorr finding your tweet.\")\n        }\n    } \n    useEffect(() => {\n        if(didLookup === false){\n            apiTweetDetail(tweetId,handleBackendLookup)\n            setDidLookup(true)\n        }\n    } , [tweetId ,didLookup , setDidLookup])\n    return tweet === null ? null : <Tweet tweet = {tweet} className = {props.className}/>\n} ","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetComponent} from './tweets'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetComponent, TweetDetailComponent} from './tweets'\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n    ReactDOM.render(<App />, appEl);\n}\nconst e = React.createElement\nconst tweetsEl = document.getElementById(\"tweetme\")\nif (tweetsEl) {\n    ReactDOM.render(\n        e(TweetComponent, tweetsEl.dataset), tweetsEl);\n}\n\nconst tweetDetailElements = document.querySelectorAll(\".tweetme-detail\")\n\ntweetDetailElements.forEach(container=> {\n    ReactDOM.render(\n        e(TweetDetailComponent, container.dataset), \n        container);\n})\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}